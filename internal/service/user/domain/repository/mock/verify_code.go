// Code generated by MockGen. DO NOT EDIT.
// Source: ./verify_code.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/scriptscat/cloudcat/internal/service/user/domain/entity"
)

// MockVerifyCode is a mock of VerifyCode interface.
type MockVerifyCode struct {
	ctrl     *gomock.Controller
	recorder *MockVerifyCodeMockRecorder
}

// MockVerifyCodeMockRecorder is the mock recorder for MockVerifyCode.
type MockVerifyCodeMockRecorder struct {
	mock *MockVerifyCode
}

// NewMockVerifyCode creates a new mock instance.
func NewMockVerifyCode(ctrl *gomock.Controller) *MockVerifyCode {
	mock := &MockVerifyCode{ctrl: ctrl}
	mock.recorder = &MockVerifyCodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerifyCode) EXPECT() *MockVerifyCodeMockRecorder {
	return m.recorder
}

// FindByCode mocks base method.
func (m *MockVerifyCode) FindByCode(code string) (*entity.VerifyCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCode", code)
	ret0, _ := ret[0].(*entity.VerifyCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCode indicates an expected call of FindByCode.
func (mr *MockVerifyCodeMockRecorder) FindByCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCode", reflect.TypeOf((*MockVerifyCode)(nil).FindByCode), code)
}

// FindById mocks base method.
func (m *MockVerifyCode) FindById(id string) (*entity.VerifyCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*entity.VerifyCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockVerifyCodeMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockVerifyCode)(nil).FindById), id)
}

// InvalidCode mocks base method.
func (m *MockVerifyCode) InvalidCode(vcode *entity.VerifyCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidCode", vcode)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidCode indicates an expected call of InvalidCode.
func (mr *MockVerifyCodeMockRecorder) InvalidCode(vcode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidCode", reflect.TypeOf((*MockVerifyCode)(nil).InvalidCode), vcode)
}

// SaveVerifyCode mocks base method.
func (m *MockVerifyCode) SaveVerifyCode(vcode *entity.VerifyCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVerifyCode", vcode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVerifyCode indicates an expected call of SaveVerifyCode.
func (mr *MockVerifyCodeMockRecorder) SaveVerifyCode(vcode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVerifyCode", reflect.TypeOf((*MockVerifyCode)(nil).SaveVerifyCode), vcode)
}
