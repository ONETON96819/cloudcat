name: release

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:

  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Build
        run: make build

      - name: Test
        run: go test -v ./...

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF:10}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: codfrm/cloudcat:${{ steps.get_version.outputs.VERSION }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            'no description'
          draft: false
          prerelease: false

      - name: Build Target
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }} GOOS=linux GOARCH=amd64 make target
          tar -zcvf cloudcat-${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz cloudcat-${{ steps.get_version.outputs.VERSION }}-linux-amd64

      - name: Upload Release Asset zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: cloudcat-${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz
          asset_name: cloudcat-${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz
          asset_content_type: application/tar+gz
